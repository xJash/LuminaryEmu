/*
    Luminary Emulator
    Copyright (C) 2009 The Dev Team:
 
    <CioNide> Riley McGowen <cionide@live.com>
    <Mintee> Robby Unruh <Anonymous>
    <Evil Mortal> Vova nikishenko <evil_mortal@hotmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net.Sockets;
using System.Net;
using System.Threading;

namespace LuminaryEmu
{
    public class GameServer
    {
        Socket mainSocket;

        public List<GameProtocol> UserList;

        public string Name;
        public string GoonzuName;
        public string InfoText;
        public short Prices;
        public int Population;
        public int Bonus;
        public int Icon;

        public LoginUser FindIp(string ip)
        {
            for (int i = 0; i < World.LoginUsers.Count; i++)
            {
                if (ip == World.LoginUsers[i].IP)
                    return World.LoginUsers[i];
            }
            return null;
        }


        public short Port;
        public bool Allow = true;

        public GameServer(string port, string Name, string GoonzuName, string InfoText, string Prices, string Population, string Bonus, string Icon)
        {
            try
            {
                this.Port = Convert.ToInt16(port);
                this.Name = Name;
                this.GoonzuName = GoonzuName;
                this.Prices = Convert.ToInt16(Prices);
                this.Population = Convert.ToInt32(Population);
                this.Bonus = Convert.ToInt32(Bonus);
                this.InfoText = InfoText;
                this.Icon = Convert.ToInt32(Icon);
            }
            catch
            {
                Allow = false;
            }

            if (Allow)
                Start();
        }

        public void Start()
        {
            mainSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            mainSocket.Bind(new IPEndPoint(IPAddress.Parse(World.LocalIP), Port));
            mainSocket.Listen(8);
            mainSocket.BeginAccept(new AsyncCallback(OnClientConnect), null);

            Tools.Log("GameServer '"+Name+"' up and running.");

            UserList = new List<GameProtocol>();

            ThreadPool.SetMinThreads(1000, 1000);
        }

        protected void OnClientConnect(IAsyncResult asyn)
        {
            Socket socket = mainSocket.EndAccept(asyn);
            LoginUser user = FindIp(socket.RemoteEndPoint.ToString().Split(':')[0]);
            if (user != null)
            {
                Tools.Log("A user is in the GameServer.");
                World.LoginUsers.Remove(user);
                UserList.Add(new GameProtocol(socket, this, user));
            }
            else
                socket.Close();
            mainSocket.BeginAccept(new AsyncCallback(OnClientConnect), null);
        }

        internal void ShutDown()
        {
            mainSocket.Close();
            Tools.Log("GameServer " + Name + " shutting down.");
        }
    }
}
